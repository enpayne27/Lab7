/* Lab 7
  ******************************************************************************
  * @file    main.c
  * @author  Erin Payne
  * @version V1.0
  * @date    8-May-2019
  * @brief   Default main function.
  ******************************************************************************
*/
#include "main.h"
#include "stm32l4xx.h"
#include "stm32l4xx_hal.h"
#include "stm32l475e_iot01.h"
#include "string.h"
#include "USART.h"
#include "circularBuffer.h"
#include <stdio.h>
#include <stdlib.h>
#include "SerialWifiBridge.h"
#include "ECE631JSON.h"

static uint32_t USARTCount = 0;
static commBuffer_t RX;
static commBuffer_t TX;

int main(void)
{
	HAL_Init();
	//Configure the System clock to have a frequency of 80 MHz
	SystemClock_Config();

	//Initializes Buffers
	initBuffer(&RX, 0);
	initBuffer(&TX, 1);

	//Configure UART4
	Configure_USART();

	//Startup test text
	char* text = "\nChip programmed successfully\n";
	SendCharArrayUSART4(text,strlen(text));

	//Initialization steps for LED
	BSP_LED_Init(LED2);
	BSP_LED_Off(LED2);
	uint32_t PrevTicks = HAL_GetTick();
	int statusCount = 2000;

	while(1){
		//Begins tick counts for LED flashes
		uint32_t CurrTicks = HAL_GetTick();

		if((CurrTicks - PrevTicks) >= statusCount){
			PrevTicks = CurrTicks;
			BSP_LED_Toggle(LED2);
		}

		//Check if there is a message in the receiving buffer
		if(haveMessage(&RX)){
			//Create string to hold incoming message
			char input[MAXCOMMBUFFER] = "";
			//If message available, get it from the receiving buffer
			getMessage(&RX, input);

			//Verify initial messages are responses
			char responseType[] = "Response";
			char result[300] = "";
			GetNameValue(input, responseType, result);
			unsigned int Mask = BridgeResponseID(result);

			char JSONStr1[300] = "";
			char JSONStr2[300] = "";
			char JSONStr3[300] = "";
			char message[300] = "";

			//Check message for corresponding response message
			switch(Mask){
				case StartUp:{
					//Response: Description and version
					break;
				}
				case WifiStatus:{
					//Response:"WifiStatus"
						//Formatted as {"Response":"WifiStatus","Wifi":{"IP": null, "MAC": "a536d748f900", "Gateway": "192.168.1.1", "isGWPingable": false}}
						GetNameValue(input, "Wifi", JSONStr1); //Grab string within first brackets of JSON
						GetNameValue(JSONStr1, "isGWPingable", JSONStr2); //Grab string within second brackets of JSON
					//Action:
						//Never connected, send "WifiSetup" - if isGWPingable is null
						if(strstr(JSONStr2, "null")){
							//Formats string as {"Action":"WifiSetup","Wifi":{"SSID":"ece631Lab","Password":"stm32IOT!"}}
							pack_json("{s:s,s:{s:s,s:s}}", message, "Action", "WifiSetup", "Wifi", "SSID","ece631Lab", "Password", "stm32IOT!");
						}
						//Setup and connected, send "MQTTSetup" - if isGWPingable is true
						else if(strstr(JSONStr2, "true")){
							//Formats string as {"Action":"MQTTSetup","MQTT":{"Host":"192.168.1.222","Port":"1883"}}
							pack_json("{s:s,s:{s:s,s:s}}", message, "Action", "MQTTSetup", "MQTT", "Host","192.168.1.222", "Port", "1883");
							statusCount = 5000;
						}
						//Setup but not connected - if isGWPingable is falseece
						else{
							//message = "Connection failed. Reconnecting...\n";
							//SendCharArrayUSART4(text,strlen(text));
						}
					break;
				}
				case MQTTSetup:{
					//Response:"MQTTSetup" Success
						//Formatted as {"Response":"MQTTSetup","Message":{"MQTT":"{\"Result\":\"Success\"}"}}
						GetNameValue(input, "Message", JSONStr1); //Grab string within first brackets of JSON
						GetNameValue(JSONStr1, "MQTT", JSONStr2); //Grab string within second brackets of JSON
					//Action:"MQTTSubs"
						if(strstr(JSONStr2, "Success Pub ")){
							//Formats string as {"Action":"MQTTSubs","MQTT":{"Topics":["ece631/Topic1","ece631/Topic2","ece631/etc"]}}
							pack_json("{s:s,s:{s:[s]}}", message, "Action", "MQTTSubs", "MQTT", "Topics","ece631/Topic1");
							statusCount = 1000;
						}
						else{
							//message = "Could not confirm subscription\n";
							//SendCharArrayUSART4(text,strlen(text));
						}
					break;
				}
				/*case MQTTPub:{
					//Response:
					//Action:
					break;
				}*/
				case MQTTSubs:{
					//Response:"MQTTSubs" Subscribed
						//Formatted as {"Response":"MQTTSubs","Message":{"MQTT":"{\"Action\":\"Subscribed\",\"Topics\":[\"ece631/Topic1\",\"ece631/Topic2\",\"ece631/etc\"]}"}}
						GetNameValue(input, "Message", JSONStr1); //Grab string within first brackets of JSON
						GetNameValue(JSONStr1, "MQTT", JSONStr2); //Grab string within second brackets of JSON
						GetNameValue(JSONStr2, "Action", JSONStr3); //Grab string within third brackets of JSON
					//Action:
						if(strstr(JSONStr3, "Subscribed")){
							statusCount = 500;
							//Formats string as {"Action":"MQTTPub","MQTT":{"Topic":"Topic String","Message":"Needs to Be JSON String"}}
							pack_json("{s:s,s:{s:[s],s:s}}", message, "Action", "MQTTPub", "MQTT", "Topic", "ece631/Topic1", "Message", "Please give me an A");
						}
					break;
				}
				case SubscribedMessage:{
					//Response:
						//Formatted as {"Response":"SubscribedMessage","Message":{"MQTT":"String Probably JSON"}}
						GetNameValue(input, "Message", JSONStr1); //Grab string within first brackets of JSON
						GetNameValue(JSONStr1, "MQTT", JSONStr2); //Grab string within second brackets of JSON
					//Action:
						//Formats string as {"Action":"MQTTPub","MQTT":{"Topic":"Topic String","Message":"ObtainedMessage"}}
						pack_json("{s:s,s:{s:s,s:s}}", message, "Action", "MQTTPub", "MQTT", "Topic", "ece631/loopback", "Message", "Please give me an B");
					break;
				}
				default:{
					//message = "Invalid response ID received\n";
					//SendCharArrayUSART4(text,strlen(text));
					break;
				}
			}
			//and put it into the transmitting buffer
			putMessage(&TX, message, strlen(message));
			//Now that message is available, reenable interrupts for Tx buffer
			LL_USART_EnableIT_TXE(USARTx_INSTANCE);
		}
	}
}
/**
  * @brief  System Clock Configuration
  * The system Clock is configured as follow :
  * System Clock source            = PLL (MSI)
  * SYSCLK(Hz)                     = 80000000
  * HCLK(Hz)                       = 80000000
  * AHB Prescaler                  = 1
  * APB1 Prescaler                 = 1
  * APB2 Prescaler                 = 1
  * MSI Frequency(Hz)              = 4000000
  * PLL_M                          = 1
  * PLL_N                          = 40
  * PLL_R                          = 2
  * PLL_P                          = 7
  * PLL_Q                          = 4
  * Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLP = 7;
  RCC_OscInitStruct.PLL.PLLQ = 4;

  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    /* Initialization Error */
    while(1);
  }
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    /* Initialization Error */
    while(1);
  }
}
/*
 * This is a simple IRQ handler for USART4. A better design would
 * be to have a circular list of strings. Head index pointing to
 * where chars added. Tail index oldest string to be processed
 */
void USARTx_IRQHandler(void) {
	// Check if the USART6 receive interrupt flag was activated
	if(LL_USART_IsActiveFlag_RXNE(USARTx_INSTANCE)){
		putChar(&RX, LL_USART_ReceiveData8(USARTx_INSTANCE));
	}
	// Check if the USART6 transmit interrupt flag was activated
	// User requests information if active
	if(LL_USART_IsActiveFlag_TXE(USARTx_INSTANCE)){
		// Check if requested information is available
		if(haveMessage(&TX)){
			LL_USART_TransmitData8(USARTx_INSTANCE, getChar(&TX));
		}
		else{
			// Manually disable if no messages to transmit
			LL_USART_DisableIT_TXE(USARTx_INSTANCE);
		}
	}++USARTCount;
}
